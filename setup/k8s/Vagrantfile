# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.provider :virtualbox do |v|
    v.memory = 2048
    v.cpus = 2
  end

  # Set Constants
  PRIVATE_IP_NETWORK = "192.168.1.0/24"
  PRIVATE_IP_PREFIX = "192.168.1."
  MASTER_HOST_NAME = "k8smaster"
  SCRIPTS_DIR = "scripts/"
  CONFIGS_DIR = "configs/"

  %w{k8smaster k8snode01 k8snode02}.each_with_index do |name, i|
    # Pre stuff for all nodes
    ## Move files onto the vm that are required
    config.vm.provision "file", source: "#{CONFIGS_DIR}/etc_hosts", destination: "/tmp/hosts"
    config.vm.provision "file", source: "#{CONFIGS_DIR}/containerd_config.toml", destination: "/tmp/containerd_config.toml"
    config.vm.provision "troubleshoot_script_setup", type: "file", source: "#{SCRIPTS_DIR}/troubleshoot.sh", destination: "$HOME/troubleshoot.sh"

    # Prepare nodes
    config.vm.provision "run kube_node setup", type: "shell", path: "#{SCRIPTS_DIR}/kube_node_setup.sh", :privileged => true

    if name.include? "master"
      puts "we are on master"
      config.vm.define :k8smaster do |k8smaster|
        private_ip = "#{PRIVATE_IP_PREFIX}10"
        k8smaster.vm.box = "ubuntu/jammy64"
        k8smaster.vm.hostname = "#{MASTER_HOST_NAME}"
        k8smaster.vm.network "public_network", bridge: "enp4s0", ip: "#{private_ip}"

        # Prepare master
        k8smaster.vm.provision "run kube_master setup", type: "shell", path: "#{SCRIPTS_DIR}/kube_master_setup.sh", :privileged => true

        ## Prep the configuration files for master deployment
        k8smaster.vm.provision :file, :source => "#{CONFIGS_DIR}/master.env", :destination => "/tmp/master.env"
        k8smaster.vm.provision :file, :source => "#{CONFIGS_DIR}/kubeadm_config_templ.yaml", :destination => "/tmp/kubeadm_config_templ.yaml"
        k8smaster.vm.provision "create master init file", type: "shell", :inline => "source /tmp/master.env && envsubst < /tmp/kubeadm_config_templ.yaml > /tmp/kubeadm_config.yaml", :privileged => true

        # Setup Kubernetes
        k8smaster.vm.provision "pull kubeadmin images", type: "shell", :inline => "kubeadm config images pull", :privileged => true
        k8smaster.vm.provision "execute kubeadmin init", type: "shell", :inline => "kubeadm init --config /tmp/kubeadm_config.yaml 2>&1 | tee /tmp/kubeadm_out.txt", :privileged => true

        # setup kubectl
        k8smaster.vm.provision "setup kubectl config", type: "shell", :inline => "mkdir -p $HOME/.kube && cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && chown $(id -u):$(id -g) $HOME/.kube/config", :privileged => true
        k8smaster.vm.provision "move kubectl config to vagrant shared directory", type: "shell", :inline => "cat $HOME/.kube/config > /vagrant/kube_config", :privileged => true
        k8smaster.vm.provision "token value to shared dir", type: "shell", :inline => "grep 'token:' /tmp/kubeadm_out.txt | awk '{print $4}' > /vagrant/token.env", :privileged => true
        k8smaster.vm.provision "cert value to shared dir", type: "shell", :inline => "grep 'discovery-token-ca-cert-hash' /tmp/kubeadm_out.txt | awk '{print $2}' > /vagrant/discovery_token_ca_cert.env", :privileged => true
        k8smaster.vm.provision "move kubectl config to additional users", type: "shell", :inline => "mkdir -p /home/vagrant/.kube && cp /vagrant/kube_config /home/vagrant/.kube/config", :privileged => true

        # Distribute the join command
        # puts "Distribute the join command"
        # k8smaster.vm.provision "distribute the kube cluster join command to the vagrant shared directory", type: "shell", :inline => "cat /tmp/kubeadm_out.txt | tail -n 2 > /vagrant/join.sh && chmod +x /vagrant/join.sh", :privileged => true

        # Calico deploy
        k8smaster.vm.provision "get calico operators", type: "shell", :inline => "kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/tigera-operator.yaml", :privileged => true
        k8smaster.vm.provision "get calico resources", type: "shell", :inline => "wget https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/custom-resources.yaml", :privileged => true
        k8smaster.vm.provision "prepare calico config file", type: "shell", :inline => "sed -i 's|cidr: 192.168.0.0/16|cidr: 172.16.0.0/12|g' custom-resources.yaml", :privileged => true
        k8smaster.vm.provision "execute the calico command", type: "shell", :inline => "kubectl create -f custom-resources.yaml", :privileged => true
        # todo: this should use apply not create

        # Remove Taints
        ## kubectl taint nodes --all node-role.kubernetes.io/control-plane-
        ## kubectl taint nodes --all node-role.kubernetes.io/master-
      end
    end

    if name.include? "node"
      puts "we are on node"
      config.vm.define name do |worker|
        worker.vm.box = "ubuntu/jammy64"
        worker.vm.hostname = name
        worker.vm.network "public_network", bridge: "enp4s0", ip: "#{PRIVATE_IP_PREFIX}#{i + 11}"

        worker.vm.provision "copy kubectl configs to home directories", type: "shell", :inline => "cp /vagrant/kube_config $HOME/.kube/config && cp /vagrant/kube_config /home/vagrant/.kube/config", :privileged => true
        #worker.vm.provision "copy the kubelet drop in config", type: "shell", path: "scripts/kubelet_config.sh", :privileged => true
        #worker.vm.provision "move kubelet config dropin into config folder", type: "shell", :inline => "mv /tmp/kubelet_config.yml", :privileged => true
        #k8smaster.vm.provision :file, :source => "#{CONFIGS_DIR}/kubeadm_join.yaml", :destination => "/tmp/kubeadm_join.yaml"
        ## Prep the configuration files for worker deployment
        worker.vm.provision :file, :source => "#{CONFIGS_DIR}/worker.env", :destination => "/tmp/worker.env"
        worker.vm.provision :file, :source => "#{CONFIGS_DIR}/kubeadm_worker_join_templ.yaml", :destination => "/tmp/kubeadm_worker_join_templ.yaml"
        worker.vm.provision "create worker join file", type: "shell", :inline => "source /tmp/worker.env && envsubst < /tmp/kubeadm_worker_join_templ.yaml > /tmp/kubeadm_worker_join.yaml", :privileged => true
        # join configuration ref https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta3/#kubeadm-k8s-io-v1beta3-NodeRegistrationOptions
        # worker.vm.provision "join the worker useing the kubeworker_join.sh", type: "shell", path: "#{SCRIPTS_DIR}/kubeworker_join.sh", :privileged => true

        worker.vm.provision "join using config", type: "shell", :inline => "kubeadm join --config /tmp/kubeadm_worker_join.yaml | tee /tmp/join.log", :privileged => true
      end
    end
  end
end

# after this, run through initial namespace setup
## Prometheus
# Create namespace
# create cluster role
# create configmap
# create deployment
## Port forward connection.  common for debugging.
# Setup nodeport and loadbalancer services
# setup ingress

## Kubestatemetrics https://devopscube.com/setup-kube-state-metrics/
## alertmanager https://devopscube.com/alert-manager-kubernetes-guide/
## grafana https://devopscube.com/setup-prometheus-grafana-monitoring-on-kubernetes/
## grafana method 2 https://devopscube.com/setup-grafana-kubernetes/
## nodeexporter https://devopscube.com/node-exporter-kubernetes/
